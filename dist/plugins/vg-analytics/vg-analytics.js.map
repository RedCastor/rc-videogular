{"version":3,"sources":["vg-analytics.js"],"names":["angular","module","directive","$analytics","VG_STATES","restrict","require","scope","vgTrackInfo","link","elem","attr","API","info","currentState","totalMiliseconds","progressTracks","trackEvent","eventName","eventTrack","onPlayerReady","isReady","onChangeState","state","PLAY","events","play","setValue","PAUSE","pause","STOP","stop","onCompleteVideo","isCompleted","onUpdateTime","newCurrentTime","length","jump","percent","shift","updateTrackInfo","newVal","category","label","eventType","totalTime","value","Math","floor","currentTime","addWatchers","$watch","ready","oldVal","complete","progress","totalTimeWatch","totalTracks","progressJump","i","push","isConfig","config","plugins","analytics"],"mappings":"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","file":"vg-analytics.js","sourcesContent":["/**\n * @license videogular v1.4.4 http://videogular.com\n * Two Fucking Developers http://twofuckingdevelopers.com\n * License: MIT\n */\n/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.analytics.directive:vgAnalytics\n * @restrict E\n * @description\n * Adds analytics support for your videos.\n * This plugin requires the awesome angulartics module:\n * http://luisfarzati.github.io/angulartics\n *\n * This plugin is not using any analytics provider, you need to add the analytic provider of your choice to your app, like: \"angulartics.google.analytics\"\n *\n * Videogular analytics injects Angulartics, so to use your preferred plugin you need to add it on your app.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\" vg-autoplay=\"config.autoPlay\">\n *    <vg-analytics vg-track-info=\"events\"></vg-analytics>\n * </videogular>\n * </pre>\n *\n * This plugin requires an object with the following structure:\n * <pre>\n * {\n *    \"category\": \"Videogular\",\n *    \"label\": \"Main\",\n *    \"events\": {\n *      \"ready\": true,                  // Triggered when player is ready\n *      \"play\": true|'time'|'percent',  // Triggered each time player has been played. 'time' and 'percent' will attach the progress to the event value\n *      \"pause\": true|'time'|'percent', // Triggered each time player has been paused. 'time' and 'percent' will attach the progress to the event value\n *      \"stop\": true|'time'|'percent',  // Triggered each time player has been stopped. 'time' and 'percent' will attach the progress to the event value\n *      \"complete\": true,               // Triggered each time player has been completed\n *      \"progress\": 10                  // Triggered each 10% of the progress video\n *    }\n *  }\n * </pre>\n *\n * @param {object} vgTrackInfo Object with the tracking info with the following structure:\n *\n * <pre>\n * {\n *    \"category\": \"Videogular\",\n *    \"label\": \"Main\",\n *    \"events\": {\n *      \"ready\": true,\n *      \"play\": true|'time'|'percent',\n *      \"pause\": true|'time'|'percent',\n *      \"stop\": true|'time'|'percent',\n *      \"complete\": true,\n *      \"progress\": 10\n *    }\n *  }\n *  </pre>\n *\n */\n\"use strict\";\nangular.module(\"com.2fdevs.videogular.plugins.analytics\", [\"angulartics\"])\n    .directive(\n        \"vgAnalytics\",\n        [\"$analytics\", \"VG_STATES\", function ($analytics, VG_STATES) {\n            return {\n                restrict: \"E\",\n                require: \"^videogular\",\n                scope: {\n                    vgTrackInfo: \"=?\"\n                },\n                link: function (scope, elem, attr, API) {\n                    var info = null;\n                    var currentState = null;\n                    var totalMiliseconds = null;\n                    var progressTracks = [];\n\n                    scope.API = API;\n\n                    scope.trackEvent = function trackEvent(eventName) {\n                        $analytics.eventTrack(eventName, info);\n                    };\n\n                    scope.onPlayerReady = function onPlayerReady(isReady) {\n                        if (isReady) {\n                            scope.trackEvent(\"ready\");\n                        }\n                    };\n\n                    scope.onChangeState = function onChangeState(state) {\n                        currentState = state;\n\n                        switch (state) {\n                            case VG_STATES.PLAY:\n                                if (scope.vgTrackInfo.events.play) {\n                                    scope.setValue(scope.vgTrackInfo.events.play);\n                                    scope.trackEvent(\"play\");\n                                }\n                                break;\n\n                            case VG_STATES.PAUSE:\n                                if (scope.vgTrackInfo.events.pause) {\n                                    scope.setValue(scope.vgTrackInfo.events.pause);\n                                    scope.trackEvent(\"pause\");\n                                }\n                                break;\n\n                            case VG_STATES.STOP:\n                                if (scope.vgTrackInfo.events.stop) {\n                                    scope.setValue(scope.vgTrackInfo.events.stop);\n                                    scope.trackEvent(\"stop\");\n                                }\n                                break;\n                        }\n                    };\n\n                    scope.onCompleteVideo = function onCompleteVideo(isCompleted) {\n                        if (isCompleted) {\n                            scope.trackEvent(\"complete\");\n                        }\n                    };\n\n                    scope.onUpdateTime = function onUpdateTime(newCurrentTime) {\n                        if (progressTracks.length > 0 && newCurrentTime >= progressTracks[0].jump) {\n                            scope.trackEvent(\"progress \" + progressTracks[0].percent + \"%\");\n                            progressTracks.shift();\n                        }\n                    };\n\n                    scope.updateTrackInfo = function updateTrackInfo(newVal) {\n                        if (scope.vgTrackInfo.category) {\n                            info.category = scope.vgTrackInfo.category;\n                        }\n                        if (scope.vgTrackInfo.label) {\n                            info.label = scope.vgTrackInfo.label;\n                        }\n                    };\n\n                    scope.setValue = function setValue(eventType) {\n                        if (eventType) {\n                            if (eventType === 'percent') {\n                                if (API.totalTime > 1000) {\n                                    info.value = Math.floor((API.currentTime / API.totalTime) * 100);\n                                } else {\n                                    info.value = 0;\n                                }\n                            } else if (eventType === 'time') {\n                                info.value = Math.floor(API.currentTime / 1000);\n                            }\n                        }\n                    };\n\n                    scope.addWatchers = function () {\n                        if (scope.vgTrackInfo.category || scope.vgTrackInfo.label) {\n                            info = {};\n\n                            scope.updateTrackInfo(scope.vgTrackInfo);\n                        }\n\n                        scope.$watch('vgTrackInfo', scope.updateTrackInfo, true);\n\n                        // Add ready track event\n                        if (scope.vgTrackInfo.events.ready) {\n                            scope.$watch(\n                                function () {\n                                    return API.isReady;\n                                },\n                                function (newVal, oldVal) {\n                                    scope.onPlayerReady(newVal);\n                                }\n                            );\n                        }\n\n                        // Add state track event\n                        if (scope.vgTrackInfo.events.play || scope.vgTrackInfo.events.pause || scope.vgTrackInfo.events.stop) {\n                            scope.$watch(\n                                function () {\n                                    return API.currentState;\n                                },\n                                function (newVal, oldVal) {\n                                    if (newVal !== oldVal) {\n                                        scope.onChangeState(newVal);\n                                    }\n                                }\n                            );\n                        }\n\n                        // Add complete track event\n                        if (scope.vgTrackInfo.events.complete) {\n                            scope.$watch(\n                                function () {\n                                    return API.isCompleted;\n                                },\n                                function (newVal, oldVal) {\n                                    scope.onCompleteVideo(newVal);\n                                }\n                            );\n                        }\n\n                        // Add progress track event\n                        if (scope.vgTrackInfo.events.progress) {\n                            scope.$watch(\n                                function () {\n                                    return API.currentTime;\n                                },\n                                function (newVal, oldVal) {\n                                    scope.onUpdateTime(newVal / 1000);\n                                }\n                            );\n\n                            var totalTimeWatch = scope.$watch(\n                                function () {\n                                    return API.totalTime;\n                                },\n                                function (newVal, oldVal) {\n                                    totalMiliseconds = newVal / 1000;\n\n                                    if (totalMiliseconds > 0) {\n                                        var totalTracks = scope.vgTrackInfo.events.progress - 1;\n                                        var progressJump = Math.floor(totalMiliseconds * scope.vgTrackInfo.events.progress / 100);\n\n                                        for (var i = 0; i < totalTracks; i++) {\n                                            progressTracks.push({\n                                                percent: (i + 1) * scope.vgTrackInfo.events.progress,\n                                                jump: (i + 1) * progressJump\n                                            });\n                                        }\n\n                                        totalTimeWatch();\n                                    }\n                                }\n                            );\n                        }\n                    };\n\n                    if (API.isConfig) {\n                        scope.$watch(\"API.config\",\n                            function () {\n                                if (scope.API.config) {\n                                    scope.vgTrackInfo = scope.API.config.plugins.analytics;\n                                    scope.addWatchers();\n                                }\n                            }\n                        );\n                    }\n                    else {\n                        scope.addWatchers();\n                    }\n                }\n            };\n        }\n        ]);\n"],"sourceRoot":"scripts/"}