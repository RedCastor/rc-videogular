{"version":3,"sources":["vg-controls.js","vg-fullscreen-button/vg-fullscreen-button.js","vg-play-pause-button/vg-play-pause-button.js","vg-playback-button/vg-playback-button.js","vg-scrub-bar/vg-scrub-bar-buffer.js","vg-scrub-bar/vg-scrub-bar-cue-points.js","vg-scrub-bar/vg-scrub-bar-current-time.js","vg-scrub-bar/vg-scrub-bar-thumbnails.js","vg-scrub-bar/vg-scrub-bar.js","vg-time-display/vg-time-display.js","vg-volume/vg-mute-button.js","vg-volume/vg-volume-bar.js","vg-volume/vg-volume.js"],"names":["angular","module","run","$templateCache","put","directive","$timeout","VG_STATES","restrict","require","transclude","templateUrl","elem","attrs","vgTemplate","scope","vgAutohide","vgAutohideTime","link","attr","API","w","h","autoHideTime","hideInterval","onMouseMove","showControls","setAutohide","value","currentState","PLAY","hideControls","animationClass","cancel","setAutohideTime","isConfig","$watch","config","ahValue","plugins","controls","autohide","ahtValue","autohideTime","undefined","newVal","oldVal","onChangeFullScreen","isFullScreen","fullscreenIcon","enter","exit","onClickFullScreen","toggleFullScreen","setState","newState","playPauseIcon","pause","PAUSE","play","STOP","onClickPlayPause","playPause","vgSpeeds","playback","setPlayback","parseFloat","onClickPlayback","playbackOptions","nextPlaybackRate","indexOf","toString","length","percentTime","onUpdateBuffer","newBuffer","totalTime","css","bufferEnd","vgCuePoints","onPlayerReady","updateCuePoints","onUpdateCuePoints","cuePoints","totalWidth","parseInt","clientWidth","i","l","end","timeLapse","start","cuePointDuration","position","Math","round","percentWidth","$$style","width","left","onUpdateTime","newCurrentTime","currentTime","VG_UTILS","vgThumbnails","thumbnailsWidth","thumbWidth","slider","querySelector","isStrip","thumbnails","thumbnailContainer","getOffset","event","el","target","x","isNaN","offsetLeft","scrollLeft","offsetParent","clientX","onLoadThumbnails","currentTarget","naturalWidth","onLoadThumbnail","updateThumbnails","second","percentage","thPos","scrollWidth","bgPos","background-image","background-position","secondsByPixel","lapse","floor","ceil","th","params","thumbnail","$event","offsetX","mediaElement","duration","$digest","onTouchMove","touches","touchX","onMouseLeave","onTouchLeave","onDestroy","unbind","thLoader","Image","onload","bind","src","isMobileDevice","$on","isSeeking","isPlaying","isPlayingWhenSeeking","LEFT","RIGHT","NUM_PERCENT","path","ariaTime","time","onScrubBarTouchStart","originalEvent","seekTime","onScrubBarTouchEnd","onScrubBarTouchMove","onScrubBarTouchLeave","onScrubBarMouseDown","fixEventOffset","onScrubBarMouseUp","onScrubBarMouseMove","onScrubBarMouseLeave","onScrubBarKeyDown","currentPercent","which","keyCode","preventDefault","timeLeft","isLive","isMuted","UP","DOWN","CHANGE_PER_PRESS","onClickMute","currentVolume","defaultVolume","muteIcon","mute","setVolume","onMuteButtonFocus","volumeVisibility","onMuteButtonLoseFocus","onMuteButtonLeave","document","activeElement","blur","onMuteButtonKeyDown","volume","newVolume","onSetVolume","percentValue","level0","level1","level2","level3","isChangingVolume","volumeBackElem","element","getElementsByClassName","volumeValueElem","onClickVolume","volumeHeight","prop","offsetY","volValue","onMouseDownVolume","onMouseUpVolume","onMouseLeaveVolume","onMouseMoveVolume","updateVolumeView","onChangeVisibility","onMouseOverVolume","$evalAsync"],"mappings":"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","file":"vg-controls.js","sourcesContent":["/**\n * @license videogular v1.4.4 http://videogular.com\n * Two Fucking Developers http://twofuckingdevelopers.com\n * License: MIT\n */\n/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgControls\n * @restrict E\n * @description\n * This directive acts as a container and you will need other directives to control the media.\n * Inside this directive you can add other directives like vg-play-pause-button and vg-scrub-bar.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'></vg-controls>\n * </videogular>\n * </pre>\n *\n * @param {boolean=false} vgAutohide Boolean variable or value to activate autohide.\n * @param {number=2000} vgAutohideTime Number variable or value that represents the time in milliseconds that will wait vgControls until it hides.\n *\n *\n */\n\"use strict\";\nangular.module(\"com.2fdevs.videogular.plugins.controls\", [])\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-controls\",\n            '<div class=\"controls-container\" ng-mousemove=\"onMouseMove()\" ng-class=\"animationClass\" ng-transclude></div>');\n    }]\n)\n    .directive(\"vgControls\",\n    [\"$timeout\", \"VG_STATES\", function ($timeout, VG_STATES) {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            transclude: true,\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-controls';\n            },\n            scope: {\n                vgAutohide: \"=?\",\n                vgAutohideTime: \"=?\"\n            },\n            link: function (scope, elem, attr, API) {\n                var w = 0;\n                var h = 0;\n                var autoHideTime = 2000;\n                var hideInterval;\n\n                scope.API = API;\n\n                scope.onMouseMove = function onMouseMove() {\n                    if (scope.vgAutohide) {\n                        scope.showControls();\n                    }\n                };\n\n                scope.setAutohide = function setAutohide(value) {\n                    if (value && API.currentState === VG_STATES.PLAY) {\n                        hideInterval = $timeout(scope.hideControls, autoHideTime);\n                    }\n                    else {\n                        scope.animationClass = \"\";\n                        $timeout.cancel(hideInterval);\n                        scope.showControls();\n                    }\n                };\n\n                scope.setAutohideTime = function setAutohideTime(value) {\n                    autoHideTime = value;\n                };\n\n                scope.hideControls = function hideControls() {\n                    scope.animationClass = \"hide-animation\";\n                };\n\n                scope.showControls = function showControls() {\n                    scope.animationClass = \"show-animation\";\n                    $timeout.cancel(hideInterval);\n                    if (scope.vgAutohide && API.currentState === VG_STATES.PLAY) {\n                        hideInterval = $timeout(scope.hideControls, autoHideTime);\n                    }\n                };\n\n                if (API.isConfig) {\n                    scope.$watch(\"API.config\",\n                        function () {\n                            if (scope.API.config) {\n                                var ahValue = scope.API.config.plugins.controls.autohide || false;\n                                var ahtValue = scope.API.config.plugins.controls.autohideTime || 2000;\n                                scope.vgAutohide = ahValue;\n                                scope.vgAutohideTime = ahtValue;\n                                scope.setAutohideTime(ahtValue);\n                                scope.setAutohide(ahValue);\n                            }\n                        }\n                    );\n                }\n                else {\n                    // If vg-autohide has been set\n                    if (scope.vgAutohide !== undefined) {\n                        scope.$watch(\"vgAutohide\", scope.setAutohide);\n                    }\n\n                    // If vg-autohide-time has been set\n                    if (scope.vgAutohideTime !== undefined) {\n                        scope.$watch(\"vgAutohideTime\", scope.setAutohideTime);\n                    }\n                }\n\n                scope.$watch(\n                    function () {\n                        return API.currentState;\n                    },\n                    function (newVal, oldVal) {\n                        if (scope.vgAutohide) {\n                            scope.showControls();\n                        }\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgFullscreenButton\n * @restrict E\n * @description\n * Directive to switch between fullscreen and normal mode.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-fullscreen-button></vg-fullscreen-button>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-fullscreen-button\",\n            '<button class=\"iconButton\" ng-click=\"onClickFullScreen()\" ng-class=\"fullscreenIcon\" aria-label=\"Toggle full screen\" type=\"button\"> </button>');\n    }]\n)\n    .directive(\"vgFullscreenButton\",\n    [function () {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            scope: {},\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-fullscreen-button';\n            },\n            link: function (scope, elem, attr, API) {\n                scope.onChangeFullScreen = function onChangeFullScreen(isFullScreen) {\n                    scope.fullscreenIcon = {enter: !isFullScreen, exit: isFullScreen};\n                };\n\n                scope.onClickFullScreen = function onClickFullScreen() {\n                    API.toggleFullScreen();\n                };\n\n                scope.fullscreenIcon = {enter: true};\n\n                scope.$watch(\n                    function () {\n                        return API.isFullScreen;\n                    },\n                    function (newVal, oldVal) {\n                        if (newVal !== oldVal) {\n                            scope.onChangeFullScreen(newVal);\n                        }\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgPlayPauseButton\n * @restrict E\n * @description\n * Adds a button inside vg-controls to play and pause media.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-play-pause-button></vg-play-pause-button>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-play-pause-button\",\n            '<button class=\"iconButton\" ng-click=\"onClickPlayPause()\" ng-class=\"playPauseIcon\" aria-label=\"Play/Pause\" type=\"button\"></button>');\n    }]\n)\n    .directive(\"vgPlayPauseButton\",\n    [\"VG_STATES\", function (VG_STATES) {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            scope: {},\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-play-pause-button';\n            },\n            link: function (scope, elem, attr, API) {\n                scope.setState = function setState(newState) {\n                    switch (newState) {\n                        case VG_STATES.PLAY:\n                            scope.playPauseIcon = {pause: true};\n                            break;\n\n                        case VG_STATES.PAUSE:\n                            scope.playPauseIcon = {play: true};\n                            break;\n\n                        case VG_STATES.STOP:\n                            scope.playPauseIcon = {play: true};\n                            break;\n                    }\n                };\n\n                scope.onClickPlayPause = function onClickPlayPause() {\n                    API.playPause();\n                };\n\n                scope.playPauseIcon = {play: true};\n\n                scope.$watch(\n                    function () {\n                        return API.currentState;\n                    },\n                    function (newVal, oldVal) {\n                        scope.setState(newVal);\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgPlaybackButton\n * @restrict E\n * @description\n * Directive to display a playback buttom to control the playback rate.\n *\n * @param {array} vgSpeeds Bindable array with a list of speed options as strings. Default ['0.5', '1', '1.5', '2']\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-playback-button vg-speeds='config.playbackSpeeds'></vg-playback-button>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-playback-button\",\n            '<button class=\"playbackValue iconButton\" ng-click=\"onClickPlayback()\">{{playback}}x</button>');\n    }]\n)\n    .directive(\"vgPlaybackButton\",\n    [function () {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-playback-button';\n            },\n            scope: {\n                vgSpeeds: '=?'\n            },\n            link: function (scope, elem, attr, API) {\n                scope.playback = '1';\n\n                scope.setPlayback = function(playback) {\n                    scope.playback = playback;\n                    API.setPlayback(parseFloat(playback));\n                };\n\n                scope.onClickPlayback = function onClickPlayback() {\n                    var playbackOptions = scope.vgSpeeds || ['0.5', '1', '1.5', '2'];\n                    var nextPlaybackRate = playbackOptions.indexOf(scope.playback.toString()) + 1;\n\n                    if (nextPlaybackRate >= playbackOptions.length) {\n                        scope.playback = playbackOptions[0];\n                    }\n                    else {\n                        scope.playback = playbackOptions[nextPlaybackRate];\n                    }\n\n                    scope.setPlayback(scope.playback);\n                };\n\n                scope.$watch(\n                    function () {\n                        return API.playback;\n                    },\n                    function(newVal, oldVal) {\n                        if (newVal !== oldVal) {\n                            scope.setPlayback(newVal);\n                        }\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgScrubBarBuffer\n * @restrict E\n * @description\n * Layer inside vg-scrub-bar to display the buffer.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-scrub-bar>\n *            <vg-scrub-bar-buffer></vg-scrub-bar-buffer>\n *        </vg-scrub-bar>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .directive(\"vgScrubBarBuffer\",\n    [function () {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            link: function (scope, elem, attr, API) {\n                var percentTime = 0;\n\n                scope.onUpdateBuffer = function onUpdateBuffer(newBuffer) {\n                    if (typeof newBuffer === 'number' && API.totalTime) {\n                        percentTime = 100 * (newBuffer / API.totalTime);\n                        elem.css(\"width\", percentTime + \"%\");\n                    } else {\n                        elem.css(\"width\", 0);\n                    }\n                };\n\n                scope.$watch(\n                    function () {\n                        return API.bufferEnd;\n                    },\n                    function (newVal, oldVal) {\n                        scope.onUpdateBuffer(newVal);\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgScrubBarCuePoints\n * @restrict E\n * @description\n * Layer inside vg-scrub-bar to display a cue point timeline.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls>\n *        <vg-scrub-bar>\n *            <vg-scrub-bar-cue-points vg-cue-points='config.cuePoints[0]'></vg-scrub-bar-cue-points>\n *        </vg-scrub-bar>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run([\"$templateCache\",\n        function ($templateCache) {\n            $templateCache.put(\"vg-templates/vg-scrub-bar-cue-points\",\n                '<div class=\"cue-point-timeline\">' +\n                    '<div ng-repeat=\"cuePoint in vgCuePoints\" class=\"cue-point\" ng-style=\"cuePoint.$$style\"></div>' +\n                '</div>');\n        }\n    ])\n    .directive(\"vgScrubBarCuePoints\", [\n        function () {\n            return {\n                restrict: \"E\",\n                require: \"^videogular\",\n                templateUrl: function (elem, attrs) {\n                    return attrs.vgTemplate || 'vg-templates/vg-scrub-bar-cue-points';\n                },\n                scope: {\n                    \"vgCuePoints\": \"=\"\n                },\n                link: function (scope, elem, attr, API) {\n                    scope.onPlayerReady = function onPlayerReady() {\n                        scope.updateCuePoints(scope.vgCuePoints);\n                    };\n                    scope.updateCuePoints = function onUpdateCuePoints(cuePoints) {\n                        var totalWidth;\n\n                        if (cuePoints) {\n                            totalWidth = parseInt(elem[0].clientWidth);\n\n                            for (var i = 0, l = cuePoints.length; i < l; i++) {\n                                var end = (cuePoints[i].timeLapse.end >= 0) ? cuePoints[i].timeLapse.end : cuePoints[i].timeLapse.start + 1;\n                                var cuePointDuration = (end - cuePoints[i].timeLapse.start) * 1000;\n                                var position = (cuePoints[i].timeLapse.start * 100 / (Math.round(API.totalTime / 1000))) + \"%\";\n                                var percentWidth = 0;\n\n                                if (typeof cuePointDuration === 'number' && API.totalTime) {\n                                    percentWidth = ((cuePointDuration * 100) / API.totalTime) + \"%\";\n                                }\n\n                                cuePoints[i].$$style = {\n                                    width: percentWidth,\n                                    left: position\n                                };\n                            }\n                        }\n                    };\n\n                    scope.$watch(\"vgCuePoints\", scope.updateCuePoints);\n\n                    scope.$watch(\n                        function () {\n                            return API.totalTime;\n                        },\n                        function (newVal, oldVal) {\n                            if (newVal > 0) {\n                                scope.onPlayerReady();\n                            }\n                        }\n                    );\n                }\n            };\n        }\n    ]);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgScrubBarCurrentTime\n * @restrict E\n * @description\n * Layer inside vg-scrub-bar to display the current time.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-scrub-bar>\n *            <vg-scrub-bar-current-time></vg-scrub-bar-current-time>\n *        </vg-scrub-bar>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .directive(\"vgScrubBarCurrentTime\",\n    [function () {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            link: function (scope, elem, attr, API) {\n                var percentTime = 0;\n\n                scope.onUpdateTime = function onUpdateTime(newCurrentTime) {\n                    if (typeof newCurrentTime === 'number' && API.totalTime) {\n                        percentTime = 100 * (newCurrentTime / API.totalTime);\n                        elem.css(\"width\", percentTime + \"%\");\n                    } else {\n                        elem.css(\"width\", 0);\n                    }\n                };\n\n                scope.$watch(\n                    function () {\n                        return API.currentTime;\n                    },\n                    function (newVal, oldVal) {\n                        scope.onUpdateTime(newVal);\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgScrubBarThumbnails\n * @restrict E\n * @description\n * Layer inside vg-scrub-bar to display thumbnails.\n *\n * Param thumbnails could be a string url pointing to a strip of thumbnails or an array of objects with the same\n * format that you can find in cue points.\n *\n * **Strip of thumbnails**\n * Must be an image with exactly 100 thumbnails. Recommended size per each thumbnail 107x60\n * Example of param value: \"assets/images/strip-of-thumbnails.jpg\"\n *\n * To create a strip of thumbnails you can use ffmpeg:\n * ffmpeg -loglevel panic -y -i app/assets/videos/videogular.mp4 -frames 1 -q:v 1 -vf\n * \"select=not(mod(n\\,29)),scale=-1:60,tile=100x1\" app/assets/thumbnails/thumbnail.jpg\n *\n * **List of thumbnails**\n * Array with a list of cue points as images. You can specify start or a lapse with start and end.\n * Example of param value:\n *\n * [\n *     {\n *         \"timeLapse\": {\n *             \"start\": 5\n *         },\n *         params: {\n *             \"thumbnail\": \"assets/thumbnails/thumbnail-shown-at-second-5.jpg\"\n *         }\n *     },\n *     {\n *         \"timeLapse\": {\n *             \"start\": 49,\n *             \"end\": 60\n *         },\n *         \"params\": {\n *             \"thumbnail\": \"assets/thumbnails/thumbnail-shown-between-seconds-49-and-60.jpg\"\n *         }\n *     }\n * ]\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls>\n *        <vg-scrub-bar>\n *            <vg-scrub-bar-thumbnails vg-thumbnails='config.thumbnails'></vg-scrub-bar-thumbnails>\n *        </vg-scrub-bar>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run([\"$templateCache\",\n        function ($templateCache) {\n            $templateCache.put(\"vg-templates/vg-scrub-bar-thumbnails\",\n                '<div class=\"vg-thumbnails\" ng-show=\"thumbnails\" ng-style=\"thumbnailContainer\">' +\n                    '<div class=\"image-thumbnail\" ng-style=\"thumbnails\"></div>' +\n                '</div>' +\n                '<div class=\"background\"></div>'\n            );\n        }\n    ])\n    .directive(\"vgScrubBarThumbnails\", [\"VG_UTILS\",\n        function (VG_UTILS) {\n            return {\n                restrict: \"E\",\n                require: \"^videogular\",\n                templateUrl: function (elem, attrs) {\n                    return attrs.vgTemplate || 'vg-templates/vg-scrub-bar-thumbnails';\n                },\n                scope: {\n                    \"vgThumbnails\": \"=\"\n                },\n                link: function (scope, elem, attr, API) {\n                    var thumbnailsWidth = 0;\n                    var thumbWidth = 0;\n                    var slider = elem[0].querySelector(\".background\");\n                    var isStrip = (typeof scope.vgThumbnails === \"string\");\n\n                    scope.thumbnails = false;\n                    scope.thumbnailContainer = {};\n\n                    scope.getOffset = function getOffset(event) {\n                        var el = event.target,\n                            x = 0;\n\n                        while (el && !isNaN(el.offsetLeft)) {\n                            x += el.offsetLeft - el.scrollLeft;\n                            el = el.offsetParent;\n                        }\n\n                        return event.clientX - x;\n                    };\n\n                    scope.onLoadThumbnails = function(event) {\n                        thumbnailsWidth = event.currentTarget.naturalWidth;\n                        thumbWidth = thumbnailsWidth / 100;\n                    };\n\n                    scope.onLoadThumbnail = function(event) {\n                        thumbWidth = event.currentTarget.naturalWidth;\n                    };\n\n                    scope.updateThumbnails = function(second) {\n                        var percentage = Math.round(second * 100 / (API.totalTime / 1000));\n                        var thPos = (slider.scrollWidth * percentage / 100) - (thumbWidth / 2);\n\n                        if (isStrip) {\n                            var bgPos = Math.round(thumbnailsWidth * percentage / 100);\n\n                            scope.thumbnailContainer = {\n                                \"width\": thumbWidth + \"px\",\n                                \"left\": thPos + \"px\"\n                            };\n\n                            scope.thumbnails = {\n                                \"background-image\": 'url(\"' + scope.vgThumbnails + '\")',\n                                \"background-position\": -bgPos + \"px 0px\"\n                            };\n                        }\n                        else {\n                            var secondsByPixel = API.totalTime / slider.scrollWidth / 1000;\n                            var lapse = {\n                                start: Math.floor(second - (secondsByPixel / 2)),\n                                end: Math.ceil(second)\n                            };\n\n                            if (lapse.start < 0) {\n                                lapse.start = 0;\n                            }\n                            if (lapse.end > API.totalTime) {\n                                lapse.end = API.totalTime;\n                            }\n\n                            scope.thumbnailContainer = {\n                                \"left\": thPos + \"px\"\n                            };\n\n                            scope.thumbnails = {\n                                \"background-image\": 'none'\n                            };\n                            \n                            if (scope.vgThumbnails) {\n                                for (var i=0, l=scope.vgThumbnails.length; i<l; i++) {\n                                    var th = scope.vgThumbnails[i];\n\n                                    if (th.timeLapse.end >= 0) {\n                                        if (lapse.start >= th.timeLapse.start && (lapse.end <= th.timeLapse.end || lapse.end <= th.timeLapse.start)) {\n                                            scope.thumbnails = {\n                                                \"background-image\": 'url(\"' + th.params.thumbnail + '\")'\n                                            };\n                                            break;\n                                        }\n                                    }\n                                    else {\n                                        if (th.timeLapse.start >= lapse.start && th.timeLapse.start <= lapse.end) {\n                                            scope.thumbnails = {\n                                                \"background-image\": 'url(\"' + th.params.thumbnail + '\")'\n                                            };\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    scope.onMouseMove = function($event) {\n                        var second = Math.round($event.offsetX * API.mediaElement[0].duration / slider.scrollWidth);\n\n                        scope.updateThumbnails(second);\n\n                        scope.$digest();\n                    };\n\n                    scope.onTouchMove = function($event) {\n                        var touches = $event.touches;\n                        var touchX = scope.getOffset(touches[0]);\n                        var second = Math.round(touchX * API.mediaElement[0].duration / slider.scrollWidth);\n\n                        scope.updateThumbnails(second);\n\n                        scope.$digest();\n                    };\n\n                    scope.onMouseLeave = function(event) {\n                        scope.thumbnails = false;\n\n                        scope.$digest();\n                    };\n\n                    scope.onTouchLeave = function(event) {\n                        scope.thumbnails = false;\n\n                        scope.$digest();\n                    };\n\n                    scope.onDestroy = function() {\n                        elem.unbind(\"touchmove\", scope.onTouchMove);\n                        elem.unbind(\"touchleave\", scope.onTouchLeave);\n                        elem.unbind(\"touchend\", scope.onTouchLeave);\n                        elem.unbind(\"mousemove\", scope.onMouseMove);\n                        elem.unbind(\"mouseleave\", scope.onMouseLeave);\n                    };\n\n                    var thLoader;\n                    if (isStrip) {\n                        thLoader = new Image();\n                        thLoader.onload = scope.onLoadThumbnails.bind(scope);\n                        thLoader.src = scope.vgThumbnails;\n                    }\n                    else {\n                        thLoader = new Image();\n                        thLoader.onload = scope.onLoadThumbnail.bind(scope);\n                        thLoader.src = scope.vgThumbnails[0].params.thumbnail;\n                    }\n\n                    // Touch move is really buggy in Chrome for Android, maybe we could use mouse move that works ok\n                    if (VG_UTILS.isMobileDevice()) {\n                        elem.bind(\"touchmove\", scope.onTouchMove);\n                        elem.bind(\"touchleave\", scope.onTouchLeave);\n                        elem.bind(\"touchend\", scope.onTouchLeave);\n                    }\n                    else {\n                        elem.bind(\"mousemove\", scope.onMouseMove);\n                        elem.bind(\"mouseleave\", scope.onMouseLeave);\n                    }\n\n                    scope.$on('destroy', scope.onDestroy.bind(scope));\n                }\n            };\n        }\n    ]);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgScrubBar\n * @restrict E\n * @description\n * Directive to control the time and display other information layers about the progress of the media.\n * This directive acts as a container and you can add more layers to display current time, cuepoints, buffer or whatever you need.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-scrub-bar></vg-scrub-bar>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run([\"$templateCache\",\n        function ($templateCache) {\n            $templateCache.put(\"vg-templates/vg-scrub-bar\",\n                '<div role=\"slider\" ' +\n                      'aria-valuemax=\"{{ariaTime(API.totalTime)}}\" ' +\n                      'aria-valuenow=\"{{ariaTime(API.currentTime)}}\" ' +\n                      'aria-valuemin=\"0\" ' +\n                      'aria-label=\"Time scrub bar\" ' +\n                      'tabindex=\"0\" ' +\n                      'ng-keydown=\"onScrubBarKeyDown($event)\">' +\n                '</div>' +\n                '<div class=\"container\" ng-transclude></div>'\n            );\n        }]\n    )\n    .directive(\"vgScrubBar\", [\"VG_STATES\", \"VG_UTILS\",\n        function (VG_STATES, VG_UTILS) {\n            return {\n                restrict: \"E\",\n                require: \"^videogular\",\n                transclude: true,\n                templateUrl: function (elem, attrs) {\n                    return attrs.vgTemplate || 'vg-templates/vg-scrub-bar';\n                },\n                scope: {\n                    vgThumbnails: \"=\"\n                },\n                link: function (scope, elem, attr, API) {\n                    var isSeeking = false;\n                    var isPlaying = false;\n                    var isPlayingWhenSeeking = false;\n                    var LEFT = 37;\n                    var RIGHT = 39;\n                    var NUM_PERCENT = 5;\n                    var thumbnailsWidth = 0;\n                    var thumbWidth = 0;\n                    var slider = elem[0].querySelector(\"div[role=slider]\");\n\n                    scope.thumbnails = false;\n                    scope.thumbnailContainer = {};\n\n                    scope.API = API;\n\n                    scope.onLoadThumbnails = function(event) {\n                        thumbnailsWidth = event.path[0].naturalWidth;\n                        thumbWidth = thumbnailsWidth / 100;\n                    };\n\n                    scope.ariaTime = function (time) {\n                        return Math.round(time / 1000);\n                    };\n\n                    scope.getOffset = function getOffset(event) {\n                        var el = event.target,\n                        x = 0;\n\n                        while (el && !isNaN(el.offsetLeft)) {\n                            x += el.offsetLeft - el.scrollLeft;\n                            el = el.offsetParent;\n                        }\n\n                        return event.clientX - x;\n                    };\n\n                    scope.onScrubBarTouchStart = function onScrubBarTouchStart($event) {\n                        var event = $event.originalEvent || $event;\n                        var touches = event.touches;\n                        var touchX = scope.getOffset(touches[0]);\n\n                        isSeeking = true;\n                        if (isPlaying) {\n                            isPlayingWhenSeeking = true;\n                        }\n                        API.pause();\n                        API.seekTime(touchX * API.mediaElement[0].duration / slider.scrollWidth);\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarTouchEnd = function onScrubBarTouchEnd($event) {\n                        var event = $event.originalEvent || $event;\n                        if (isPlayingWhenSeeking) {\n                            isPlayingWhenSeeking = false;\n                            API.play();\n                        }\n                        isSeeking = false;\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarTouchMove = function onScrubBarTouchMove($event) {\n                        var event = $event.originalEvent || $event;\n                        var touches = event.touches;\n                        var touchX = scope.getOffset(touches[0]);\n\n                        if (scope.vgThumbnails && scope.vgThumbnails.length) {\n                            var second = Math.round(touchX * API.mediaElement[0].duration / slider.scrollWidth);\n                            var percentage = Math.round(second * 100 / (API.totalTime / 1000));\n\n                            scope.updateThumbnails(percentage);\n                        }\n\n                        if (isSeeking) {\n                            API.seekTime(touchX * API.mediaElement[0].duration / slider.scrollWidth);\n                        }\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarTouchLeave = function onScrubBarTouchLeave(event) {\n                        isSeeking = false;\n                        scope.thumbnails = false;\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarMouseDown = function onScrubBarMouseDown(event) {\n                        event = VG_UTILS.fixEventOffset(event);\n\n                        isSeeking = true;\n                        if (isPlaying) {\n                            isPlayingWhenSeeking = true;\n                        }\n                        API.pause();\n\n                        API.seekTime(event.offsetX * API.mediaElement[0].duration / slider.scrollWidth);\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarMouseUp = function onScrubBarMouseUp(event) {\n                        //event = VG_UTILS.fixEventOffset(event);\n\n                        if (isPlayingWhenSeeking) {\n                            isPlayingWhenSeeking = false;\n                            API.play();\n                        }\n                        isSeeking = false;\n                        //API.seekTime(event.offsetX * API.mediaElement[0].duration / slider.scrollWidth);\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarMouseMove = function onScrubBarMouseMove(event) {\n                        if (scope.vgThumbnails && scope.vgThumbnails.length) {\n                            var second = Math.round(event.offsetX * API.mediaElement[0].duration / slider.scrollWidth);\n                            var percentage = Math.round(second * 100 / (API.totalTime / 1000));\n\n                            scope.updateThumbnails(percentage);\n                        }\n\n                        if (isSeeking) {\n                            event = VG_UTILS.fixEventOffset(event);\n                            API.seekTime(event.offsetX * API.mediaElement[0].duration / slider.scrollWidth);\n                        }\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarMouseLeave = function onScrubBarMouseLeave(event) {\n                        isSeeking = false;\n                        scope.thumbnails = false;\n\n                        scope.$digest();\n                    };\n\n                    scope.onScrubBarKeyDown = function onScrubBarKeyDown(event) {\n                        var currentPercent = (API.currentTime / API.totalTime) * 100;\n\n                        if (event.which === LEFT || event.keyCode === LEFT) {\n                            API.seekTime(currentPercent - NUM_PERCENT, true);\n                            event.preventDefault();\n                        }\n                        else if (event.which === RIGHT || event.keyCode === RIGHT) {\n                            API.seekTime(currentPercent + NUM_PERCENT, true);\n                            event.preventDefault();\n                        }\n                    };\n\n                    scope.updateThumbnails = function updateThumbnails(percentage) {\n                        var bgPos = Math.round(thumbnailsWidth * percentage / 100);\n                        var thPos = (slider.scrollWidth * percentage / 100) - (thumbWidth / 2);\n\n                        scope.thumbnailContainer = {\n                            \"width\": thumbWidth + \"px\",\n                            \"left\": thPos + \"px\"\n                        };\n\n                        scope.thumbnails = {\n                            \"background-image\": 'url(\"' + scope.vgThumbnails + '\")',\n                            \"background-position\": -bgPos + \"px 0px\"\n                        };\n                    };\n\n                    scope.setState = function setState(newState) {\n                        if (!isSeeking) {\n                            switch (newState) {\n                                case VG_STATES.PLAY:\n                                    isPlaying = true;\n                                    break;\n\n                                case VG_STATES.PAUSE:\n                                    isPlaying = false;\n                                    break;\n\n                                case VG_STATES.STOP:\n                                    isPlaying = false;\n                                    break;\n                            }\n                        }\n                    };\n\n                    scope.onDestroy = function() {\n                        elem.unbind(\"touchstart\", scope.onScrubBarTouchStart);\n                        elem.unbind(\"touchend\", scope.onScrubBarTouchEnd);\n                        elem.unbind(\"touchmove\", scope.onScrubBarTouchMove);\n                        elem.unbind(\"touchleave\", scope.onScrubBarTouchLeave);\n                        elem.unbind(\"mousedown\", scope.onScrubBarMouseDown);\n                        elem.unbind(\"mouseup\", scope.onScrubBarMouseUp);\n                        elem.unbind(\"mousemove\", scope.onScrubBarMouseMove);\n                        elem.unbind(\"mouseleave\", scope.onScrubBarMouseLeave);\n                    };\n\n                    scope.$watch(\n                        function () {\n                            return API.currentState;\n                        },\n                        function (newVal, oldVal) {\n                            if (newVal !== oldVal) {\n                                scope.setState(newVal);\n                            }\n                        }\n                    );\n\n                    if (scope.vgThumbnails) {\n                        var thLoader = new Image();\n                        thLoader.onload = scope.onLoadThumbnails.bind(scope);\n                        thLoader.src = scope.vgThumbnails;\n                    }\n\n                    // Touch move is really buggy in Chrome for Android, maybe we could use mouse move that works ok\n                    if (VG_UTILS.isMobileDevice()) {\n                        elem.bind(\"touchstart\", scope.onScrubBarTouchStart);\n                        elem.bind(\"touchend\", scope.onScrubBarTouchEnd);\n                        elem.bind(\"touchmove\", scope.onScrubBarTouchMove);\n                        elem.bind(\"touchleave\", scope.onScrubBarTouchLeave);\n                    }\n                    else {\n                        elem.bind(\"mousedown\", scope.onScrubBarMouseDown);\n                        elem.bind(\"mouseup\", scope.onScrubBarMouseUp);\n                        elem.bind(\"mousemove\", scope.onScrubBarMouseMove);\n                        elem.bind(\"mouseleave\", scope.onScrubBarMouseLeave);\n                    }\n\n                    scope.$on('destroy', scope.onDestroy.bind(scope));\n                }\n            };\n        }\n    ]);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgTimeDisplay\n * @restrict E\n * @description\n * Adds a time display inside vg-controls to play and pause media.\n * You have three scope variables to show current time, time left and total time.\n *\n * Those scope variables are in milliseconds, you can add a date filter to show the time as you wish.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-time-display>{{currentTime | date:'hh:mm'}}</vg-time-display>\n *        <vg-time-display>{{timeLeft | date:'mm:ss'}}</vg-time-display>\n *        <vg-time-display>{{totalTime | date:'hh:mm:ss'}}</vg-time-display>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .directive(\"vgTimeDisplay\",\n    [function () {\n        return {\n            require: \"^videogular\",\n            restrict: \"E\",\n            link: function (scope, elem, attr, API) {\n                scope.currentTime = API.currentTime;\n                scope.timeLeft = API.timeLeft;\n                scope.totalTime = API.totalTime;\n                scope.isLive = API.isLive;\n\n                scope.$watch(\n                    function () {\n                        return API.currentTime;\n                    },\n                    function (newVal, oldVal) {\n                        scope.currentTime = newVal;\n                    }\n                );\n\n                scope.$watch(\n                    function () {\n                        return API.timeLeft;\n                    },\n                    function (newVal, oldVal) {\n                        scope.timeLeft = newVal;\n                    }\n                );\n\n                scope.$watch(\n                    function () {\n                        return API.totalTime;\n                    },\n                    function (newVal, oldVal) {\n                        scope.totalTime = newVal;\n                    }\n                );\n\n                scope.$watch(\n                    function () {\n                        return API.isLive;\n                    },\n                    function (newVal, oldVal) {\n                        scope.isLive = newVal;\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgMuteButton\n * @restrict E\n * @description\n * Directive to display a button to mute volume.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-volume>\n *            <vg-mute-button><vg-mute-button>\n *        </vg-volume>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-mute-button\",\n            '<button type=\"button\" class=\"iconButton\" ng-class=\"muteIcon\" ng-click=\"onClickMute()\" ng-focus=\"onMuteButtonFocus()\" ng-blur=\"onMuteButtonLoseFocus()\" ng-mouseleave=\"onMuteButtonLeave()\" ng-keydown=\"onMuteButtonKeyDown($event)\" aria-label=\"Mute\"></button>');\n    }]\n)\n    .directive(\"vgMuteButton\",\n    [function () {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-mute-button';\n            },\n            link: function (scope, elem, attr, API) {\n                var isMuted = false;\n                var UP = 38;\n                var DOWN = 40;\n                var CHANGE_PER_PRESS = 0.05;\n\n                scope.onClickMute = function onClickMute() {\n                    if (isMuted) {\n                        scope.currentVolume = scope.defaultVolume;\n                    }\n                    else {\n                        scope.currentVolume = 0;\n                        scope.muteIcon = {mute: true};\n                    }\n\n                    isMuted = !isMuted;\n\n                    API.setVolume(scope.currentVolume);\n                };\n\n                scope.onMuteButtonFocus = function onMuteButtonFocus() {\n                    scope.volumeVisibility = \"visible\";\n                };\n\n                scope.onMuteButtonLoseFocus = function onMuteButtonLoseFocus() {\n                    scope.volumeVisibility = \"hidden\";\n                };\n\n                scope.onMuteButtonLeave = function onMuteButtonLeave() {\n                    document.activeElement.blur();\n                };\n\n                scope.onMuteButtonKeyDown = function onMuteButtonKeyDown(event) {\n                    var currentVolume = (API.volume !== null) ? API.volume : 1;\n                    var newVolume;\n\n                    if (event.which === UP || event.keyCode === UP) {\n                        newVolume = currentVolume + CHANGE_PER_PRESS;\n                        if (newVolume > 1) {\n                            newVolume = 1;\n                        }\n\n                        API.setVolume(newVolume);\n                        event.preventDefault();\n                    }\n                    else if (event.which === DOWN || event.keyCode === DOWN) {\n                        newVolume = currentVolume - CHANGE_PER_PRESS;\n                        if (newVolume < 0) {\n                            newVolume = 0;\n                        }\n\n                        API.setVolume(newVolume);\n                        event.preventDefault();\n                    }\n                };\n\n                scope.onSetVolume = function onSetVolume(newVolume) {\n                    scope.currentVolume = newVolume;\n\n                    isMuted = (scope.currentVolume === 0);\n\n                    // if it's not muted we save the default volume\n                    if (!isMuted) {\n                        scope.defaultVolume = newVolume;\n                    }\n                    else {\n                        // if was muted but the user changed the volume\n                        if (newVolume > 0) {\n                            scope.defaultVolume = newVolume;\n                        }\n                    }\n\n                    var percentValue = Math.round(newVolume * 100);\n                    if (percentValue === 0) {\n                        scope.muteIcon = {mute: true};\n                    }\n                    else if (percentValue > 0 && percentValue < 25) {\n                        scope.muteIcon = {level0: true};\n                    }\n                    else if (percentValue >= 25 && percentValue < 50) {\n                        scope.muteIcon = {level1: true};\n                    }\n                    else if (percentValue >= 50 && percentValue < 75) {\n                        scope.muteIcon = {level2: true};\n                    }\n                    else if (percentValue >= 75) {\n                        scope.muteIcon = {level3: true};\n                    }\n                };\n\n                scope.defaultVolume = 1;\n                scope.currentVolume = scope.defaultVolume;\n                scope.muteIcon = {level3: true};\n\n                //Update the mute button on initialization, then watch for changes\n                scope.onSetVolume(API.volume);\n                scope.$watch(\n                    function () {\n                        return API.volume;\n                    },\n                    function (newVal, oldVal) {\n                        if (newVal !== oldVal) {\n                            scope.onSetVolume(newVal);\n                        }\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgVolumeBar\n * @restrict E\n * @description\n * Directive to display a vertical volume bar to control the volume.\n * This directive must be inside vg-volume directive and requires vg-mute-button to be displayed.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-volume>\n *            <vg-mute-button></vg-mute-button>\n *            <vg-volume-bar></vg-volume-bar>\n *        </vg-volume>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .run(\n    [\"$templateCache\", function ($templateCache) {\n        $templateCache.put(\"vg-templates/vg-volume-bar\",\n            '<div class=\"verticalVolumeBar\">' +\n            '<div class=\"volumeBackground\" ng-click=\"onClickVolume($event)\" ng-mousedown=\"onMouseDownVolume()\" ng-mouseup=\"onMouseUpVolume()\" ng-mousemove=\"onMouseMoveVolume($event)\" ng-mouseleave=\"onMouseLeaveVolume()\">' +\n            '<div class=\"volumeValue\">' +\n            '</div>' +\n            '<div class=\"volumeClickArea\">' +\n            '</div></div></div>');\n    }]\n)\n    .directive(\"vgVolumeBar\",\n    [\"VG_UTILS\", function (VG_UTILS) {\n        return {\n            restrict: \"E\",\n            require: \"^videogular\",\n            templateUrl: function (elem, attrs) {\n                return attrs.vgTemplate || 'vg-templates/vg-volume-bar';\n            },\n            link: function (scope, elem, attr, API) {\n                var isChangingVolume = false;\n                var volumeBackElem = angular.element(elem[0].getElementsByClassName(\"volumeBackground\"));\n                var volumeValueElem = angular.element(elem[0].getElementsByClassName(\"volumeValue\"));\n\n                scope.onClickVolume = function onClickVolume(event) {\n                    event = VG_UTILS.fixEventOffset(event);\n                    var volumeHeight = parseInt(volumeBackElem.prop(\"offsetHeight\"));\n                    var value = event.offsetY * 100 / volumeHeight;\n                    var volValue = 1 - (value / 100);\n\n                    API.setVolume(volValue);\n                };\n\n                scope.onMouseDownVolume = function onMouseDownVolume() {\n                    isChangingVolume = true;\n                };\n\n                scope.onMouseUpVolume = function onMouseUpVolume() {\n                    isChangingVolume = false;\n                };\n\n                scope.onMouseLeaveVolume = function onMouseLeaveVolume() {\n                    isChangingVolume = false;\n                };\n\n                scope.onMouseMoveVolume = function onMouseMoveVolume(event) {\n                    if (isChangingVolume) {\n                        event = VG_UTILS.fixEventOffset(event);\n                        var volumeHeight = parseInt(volumeBackElem.prop(\"offsetHeight\"));\n                        var value = event.offsetY * 100 / volumeHeight;\n                        var volValue = 1 - (value / 100);\n\n                        API.setVolume(volValue);\n                    }\n                };\n\n                scope.updateVolumeView = function updateVolumeView(value) {\n                    value = value * 100;\n                    volumeValueElem.css(\"height\", value + \"%\");\n                    volumeValueElem.css(\"top\", (100 - value) + \"%\");\n                };\n\n                scope.onChangeVisibility = function onChangeVisibility(value) {\n                    elem.css(\"visibility\", value);\n                };\n\n                elem.css(\"visibility\", scope.volumeVisibility);\n\n                scope.$watch(\"volumeVisibility\", scope.onChangeVisibility);\n\n                //Update the volume bar on initialization, then watch for changes\n                scope.updateVolumeView(API.volume);\n                scope.$watch(\n                    function () {\n                        return API.volume;\n                    },\n                    function (newVal, oldVal) {\n                        if (newVal !== oldVal) {\n                            scope.updateVolumeView(newVal);\n                        }\n                    }\n                );\n            }\n        };\n    }]\n);\n","/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.controls.directive:vgVolume\n * @restrict E\n * @description\n * Directive to control the volume.\n * This directive acts as a container and you will need other directives like vg-mutebutton and vg-volumebar to control the volume.\n * In mobile will be hided since volume API is disabled for mobile devices.\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\">\n *    <vg-media vg-src=\"sources\"></vg-media>\n *\n *    <vg-controls vg-autohide='config.autohide' vg-autohide-time='config.autohideTime'>\n *        <vg-volume></vg-volume>\n *    </vg-controls>\n * </videogular>\n * </pre>\n *\n */\nangular.module(\"com.2fdevs.videogular.plugins.controls\")\n    .directive(\"vgVolume\",\n    [\"VG_UTILS\", function (VG_UTILS) {\n        return {\n            restrict: \"E\",\n            link: function (scope, elem, attr) {\n                scope.onMouseOverVolume = function onMouseOverVolume() {\n                    scope.$evalAsync(function () {\n                        scope.volumeVisibility = \"visible\";\n                    });\n                };\n\n                scope.onMouseLeaveVolume = function onMouseLeaveVolume() {\n                    scope.$evalAsync(function () {\n                        scope.volumeVisibility = \"hidden\";\n                    });\n                };\n\n                scope.onDestroy = function() {\n                    elem.unbind(\"mouseover\", scope.onScrubBarTouchStart);\n                    elem.unbind(\"mouseleave\", scope.onScrubBarTouchEnd);\n                };\n\n                // We hide volume controls on mobile devices\n                if (VG_UTILS.isMobileDevice()) {\n                    elem.css(\"display\", \"none\");\n                }\n                else {\n                    scope.volumeVisibility = \"hidden\";\n\n                    elem.bind(\"mouseover\", scope.onMouseOverVolume);\n                    elem.bind(\"mouseleave\", scope.onMouseLeaveVolume);\n                }\n\n                scope.$on('destroy', scope.onDestroy.bind(scope));\n            }\n        };\n    }]\n);\n"],"sourceRoot":"scripts/"}