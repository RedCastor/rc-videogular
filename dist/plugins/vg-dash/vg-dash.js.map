{"version":3,"sources":["vg-dash.js"],"names":["angular","module","directive","$window","restrict","require","link","scope","elem","attr","API","player","dashTypeRegEx","supportsMediaSource","isDASH","source","hasDashType","test","type","hasDashExtension","src","indexOf","onSourceChange","url","isFunction","dashjs","MediaPlayer","create","initialize","mediaElement","autoPlay","Dash","di","DashContext","setAutoPlay","startup","attachView","attachSource","reset","stop","$watch","sources","newVal","oldVal"],"mappings":"AAqBA;;AACAA,QAAQC,OAAO,sCAAsC,IAChDC,UACD,UACA,EAAC,WAAW,SAAUC;IAClB,OAAO;QACHC,UAAU;QACVC,SAAS;QACTC,MAAM,SAAUC,OAAOC,MAAMC,MAAMC;YAC/B,IAAIC;YACJ,IAAIC,gBAAgB;YAEpB,SAASC;gBACL,OAAO,iBAAiBV;;YAI5B,IAAIU,uBAAuB;gBAGvBN,MAAMO,SAAS,SAASA,OAAOC;oBAC3B,IAAIC,cAAcJ,cAAcK,KAAKF,OAAOG;oBAC5C,IAAIC,mBAAmBJ,OAAOK,IAAIC,WAAYN,OAAOK,IAAIC,QAAQ,UAAU;oBAE3E,OAAOL,eAAeG;;gBAG1BZ,MAAMe,iBAAiB,SAASA,eAAeP;oBAC3C,IAAIQ,MAAMR,OAAOK;oBAGjB,IAAIb,MAAMO,OAAOC,SAAS;wBACtB,IAAIf,QAAQwB,WAAWC,UAAUA,OAAOC,cAAc;4BAElDf,SAASc,OAAOC,cAAcC;4BAC9BhB,OAAOiB,WAAWlB,IAAImB,aAAa,IAAIN,KAAKb,IAAIoB;+BAC7C;4BAEHnB,SAAS,IAAIe,YAAY,IAAIK,KAAKC,GAAGC;4BACrCtB,OAAOuB,YAAYxB,IAAIoB;4BACvBnB,OAAOwB;4BACPxB,OAAOyB,WAAW1B,IAAImB,aAAa;4BACnClB,OAAO0B,aAAad;;2BAGvB,IAAIZ,QAAQ;wBAGbA,OAAO2B;wBACP3B,SAAS;wBAGTD,IAAImB,aAAapB,KAAK,OAAOc;wBAC7Bb,IAAI6B;;;gBAIZhC,MAAMiC,OACF;oBACI,OAAO9B,IAAI+B;mBAEf,SAAUC,QAAQC;oBACdpC,MAAMe,eAAeoB,OAAO","file":"vg-dash.js","sourcesContent":["/**\n * @license videogular v1.4.4 http://videogular.com\n * Two Fucking Developers http://twofuckingdevelopers.com\n * License: MIT\n */\n/**\n * @ngdoc directive\n * @name com.2fdevs.videogular.plugins.dash.directive:vgDash\n * @restrict A\n * @description\n * Adds DASH support for vg-media.\n * This plugin requires dash.all.js file available at dash.js project:\n * https://github.com/Dash-Industry-Forum/dash.js\n *\n * <pre>\n * <videogular vg-theme=\"config.theme.url\" vg-autoplay=\"config.autoPlay\">\n *    <vg-media vg-src=\"sources\" vg-dash></vg-media>\n * </videogular>\n * </pre>\n *\n */\n\"use strict\";\nangular.module(\"com.2fdevs.videogular.plugins.dash\", [])\n    .directive(\n    \"vgDash\",\n    [\"$window\", function ($window) {\n        return {\n            restrict: \"A\",\n            require: \"^videogular\",\n            link: function (scope, elem, attr, API) {\n                var player;\n                var dashTypeRegEx = /^application\\/dash\\+xml/i;\n\n                function supportsMediaSource() {\n                    return \"MediaSource\" in $window;\n                }\n\n                //Proceed augmenting behavior only if the browser is capable of playing DASH (supports MediaSource Extensions)\n                if (supportsMediaSource()) {\n\n                    //Returns true if the source has the standard DASH type defined OR an .mpd extension.\n                    scope.isDASH = function isDASH(source) {\n                        var hasDashType = dashTypeRegEx.test(source.type);\n                        var hasDashExtension = source.src.indexOf && (source.src.indexOf(\".mpd\") > 0);\n\n                        return hasDashType || hasDashExtension;\n                    };\n\n                    scope.onSourceChange = function onSourceChange(source) {\n                        var url = source.src;\n\n                        // It's DASH, we use dash.js\n                        if (scope.isDASH(source)) {\n                            if (angular.isFunction(dashjs && dashjs.MediaPlayer)) {\n                                // dash.js version 2.x\n                                player = dashjs.MediaPlayer().create();\n                                player.initialize(API.mediaElement[0], url, API.autoPlay);\n                            } else {\n                                // dash.js version < 2.x\n                                player = new MediaPlayer(new Dash.di.DashContext());\n                                player.setAutoPlay(API.autoPlay);\n                                player.startup();\n                                player.attachView(API.mediaElement[0]);\n                                player.attachSource(url);\n                            }\n                        }\n                        else if (player) {\n                            //not DASH, but the dash.js player is still wired up\n                            //Dettach dash.js from the mediaElement\n                            player.reset();\n                            player = null;\n\n                            //player.reset() wipes out the new url already applied, so have to reapply\n                            API.mediaElement.attr('src', url);\n                            API.stop();\n                        }\n                    };\n\n                    scope.$watch(\n                        function () {\n                            return API.sources;\n                        },\n                        function (newVal, oldVal) {\n                            scope.onSourceChange(newVal[0]);\n                        }\n                    );\n                }\n            }\n        };\n    }\n    ]);\n\n"],"sourceRoot":"scripts/"}