{"version":3,"sources":["vg-vimeo.js"],"names":["angular","module","directive","$window","$timeout","VG_STATES","VG_UTILS","VG_VOLUME_KEY","restrict","require","link","scope","elem","attr","API","player","videoWidth","videoHeight","currentTime","duration","paused","volume","fullscreen","isDefined","vgVimeoFullscreen","updateTime","onUpdateTime","target","mediaElement","onPlay","event","CustomEvent","dispatchEvent","setState","PLAY","onPause","PAUSE","onEnded","onComplete","onTimeupdate","data","seconds","onProgress","getVideoId","url","vimeoUrlRegExp","m","match","updateMetadata","configurePlayer","Object","defineProperty","get","set","value","setCurrentTime","enumerable","configurable","setVolume","play","pause","getVolume","then","onVolumeChange","getCurrentTime","getDuration","supportsLocalStorage","parseFloat","localStorage","getItem","muted","currentState","autoPlay","createVimeoIframe","id","iframe","element","document","createElement","replaceWith","src","style","width","height","$eval","setAttribute","parentNode","find","css","Vimeo","Player","onSourceChange","destroy","ready","on","$watch","sources","newVal","oldVal","length","toString"],"mappings":"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","file":"vg-vimeo.js","sourcesContent":["(function(angular) {\n    'use strict';\n\n    var module = angular.module('rc-videogular.plugins.vimeo', []);\n\n    module.directive(\"vgVimeo\", ['$window', '$timeout', 'VG_STATES', 'VG_UTILS', 'VG_VOLUME_KEY', function ($window, $timeout, VG_STATES, VG_UTILS, VG_VOLUME_KEY) {\n            return {\n                restrict: 'A',\n                require: '^videogular',\n                link: function (scope, elem, attr, API) {\n                    var player;\n                    var videoWidth;\n                    var videoHeight;\n                    var currentTime = 0;\n                    var duration = 0;\n                    var paused = true;\n                    var volume = 0;\n                    var fullscreen = (angular.isDefined(attr.vgVimeoFullscreen)) ? attr.vgVimeoFullscreen : 'true';\n\n                    var updateTime = function () {\n                        API.onUpdateTime({\n                            target: API.mediaElement[0]\n                        });\n                    };\n\n                    var onPlay = function () {\n\n                        paused = false;\n                        var event = new CustomEvent('playing');\n                        API.mediaElement[0].dispatchEvent(event);\n                        API.setState(VG_STATES.PLAY);\n                    };\n\n                    var onPause = function onPause() {\n\n                        paused = true;\n                        var event = new CustomEvent('pause');\n                        API.mediaElement[0].dispatchEvent(event);\n                        API.setState(VG_STATES.PAUSE);\n                    };\n\n                    var onEnded = function () {\n\n                        API.onComplete();\n                    };\n\n                    var onTimeupdate = function (data) {\n\n                        currentTime = data.seconds;\n                        duration = data.duration;\n                        updateTime();\n                    };\n\n                    var onProgress = function (data) {\n\n                        // Trigger onStartBuffering event\n                        var event = new CustomEvent(\"waiting\");\n                        API.mediaElement[0].dispatchEvent(event);\n                    };\n\n\n                    function getVideoId(url) {\n                        var vimeoUrlRegExp = /^.+vimeo.com\\/(.*\\/)?([^#\\?]*)/;\n                        var m = url.match(vimeoUrlRegExp);\n                        return m ? m[2] || m[1] : null;\n                    }\n\n                    function updateMetadata() {\n                        var event = new CustomEvent('loadedmetadata');\n                        API.mediaElement[0].dispatchEvent(event);\n                    }\n\n                    function configurePlayer() {\n                        Object.defineProperty(API.mediaElement[0], 'currentTime', {\n                            get: function () {\n                                return currentTime;\n                            },\n                            set: function (value) {\n                                currentTime = value;\n                                player.setCurrentTime(currentTime);\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        Object.defineProperty(API.mediaElement[0], 'duration', {\n                            get: function () {\n                                return duration;\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        Object.defineProperty(API.mediaElement[0], 'paused', {\n                            get: function () {\n                                return paused;\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        Object.defineProperty(API.mediaElement[0], 'videoWidth', {\n                            get: function () {\n                                return videoWidth;\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        Object.defineProperty(API.mediaElement[0], 'videoHeight', {\n                            get: function () {\n                                return videoHeight;\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        Object.defineProperty(API.mediaElement[0], 'volume', {\n                            get: function () {\n                                return volume;\n                            },\n                            set: function (value) {\n                                volume = value;\n                                player.setVolume(volume);\n                            },\n                            enumerable : true,\n                            configurable: true\n                        });\n\n                        API.mediaElement[0].play = function () {\n                            player.play();\n                        };\n                        API.mediaElement[0].pause = function () {\n                            player.pause();\n                        };\n\n                        player.getVolume().then(function(value) {\n                            volume = value;\n                            API.onVolumeChange();\n                        });\n\n                        player.getCurrentTime().then(function(seconds) {\n                            currentTime = seconds;\n                            updateMetadata();\n                        });\n\n                        player.getDuration().then(function(value) {\n                            duration = value;\n                            updateMetadata();\n                        });\n\n                        updateTime();\n\n                        //Set media volume from localStorage if available\n                        if (VG_UTILS.supportsLocalStorage()) {\n\n                            if (parseFloat($window.localStorage.getItem(VG_VOLUME_KEY) || \"1\") > 0) {\n                                API.mediaElement[0].muted = false;\n                            }\n                        }\n\n                        //Check state for auto play\n                        if (API.currentState !== VG_STATES.PLAY) {\n                            // Trigger canplay event\n                            var event = new CustomEvent(\"canplay\");\n                            API.mediaElement[0].dispatchEvent(event);\n\n                            //Play if autoplay true\n                            if (API.autoPlay === true) {\n                                $timeout(function () {\n                                    API.play();\n                                });\n                            }\n                        }\n                        else {\n                            //AutoPlay\n                            player.play().then(function() {\n\n                            });\n                        }\n                    }\n\n                    function createVimeoIframe(id) {\n                        var iframe;\n\n                        if (player) {\n                            iframe = player.element;\n                        }\n                        else {\n                            iframe = document.createElement('iframe');\n                            angular.element(API.mediaElement[0]).replaceWith(angular.element(iframe));\n                        }\n\n                        iframe.src = '//player.vimeo.com/video/' + id + '?player_id=vimeoplayer&muted=1';\n                        iframe.style.width = '100%';\n                        iframe.style.height = '100%';\n\n                        if (scope.$eval(fullscreen)) {\n                            iframe.setAttribute('webkitallowfullscreen', '');\n                            iframe.setAttribute('mozallowfullscreen', '');\n                            iframe.setAttribute('allowfullscreen', '');\n                        }\n\n                        angular.element(iframe.parentNode.parentNode).find('vg-overlay-play').css('height', 'calc(100% - 50px)');\n\n                        return new Vimeo.Player(iframe);\n                    }\n\n                    function onSourceChange(url) {\n\n                        if (!url) {\n                            if (player) {\n                                player.destroy();\n                            }\n                            return;\n                        }\n\n                        var id = getVideoId(url);\n                        if (!id) {\n                            return;\n                        }\n\n                        player = createVimeoIframe(id);\n\n                        player.ready().then(function () {\n                            configurePlayer();\n                        });\n\n                        player.on('play', onPlay);\n                        player.on('pause', onPause);\n                        player.on('ended', onEnded);\n                        player.on('timeupdate', onTimeupdate);\n                        player.on('progress', onProgress);\n                    }\n\n                    //Watching if source change.\n                    scope.$watch(function () {\n                            return API.sources;\n                        },\n                        function (newVal, oldVal) {\n                            if (newVal && newVal.length > 0 && newVal[0].src) {\n                                onSourceChange(newVal[0].src.toString());\n                            }\n                            else {\n                                onSourceChange(null);\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n    );\n\n})(angular);"],"sourceRoot":"scripts/"}