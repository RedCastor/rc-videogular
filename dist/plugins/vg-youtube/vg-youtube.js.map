{"version":3,"sources":["vg-youtube.js"],"names":["angular","module","run","$rootScope","$window","youtubeApiReady","onYouTubeIframeAPIReady","$apply","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","directive","$timeout","$interval","VG_UTILS","VG_STATES","VG_VOLUME_KEY","restrict","require","link","scope","elem","attr","API","ytplayer","updateTimer","optionsArr","playerVars","youtubeReg","vgYoutube","split","controls","showinfo","rel","autoplay","start","iv_load_policy","forEach","item","keyValuePair","hasOwnProperty","getYoutubeId","url","match","destroyYoutubePlayer","destroy","updateTime","onUpdateTime","target","mediaElement","stopUpdateTimer","clearInterval","startUpdateTimer","interval","setInterval","onVideoReady","__defineGetter__","getCurrentTime","__defineSetter__","seconds","seekTo","getDuration","getPlayerState","YT","PlayerState","PLAYING","a","width","height","getVolume","volume","setVolume","getPlaybackRate","rate","setPlaybackRate","play","playVideo","pause","pauseVideo","element","getIframe","css","supportsLocalStorage","parseFloat","localStorage","getItem","currentState","PLAY","event","CustomEvent","dispatchEvent","autoPlay","onVideoStateChange","player","data","ENDED","onComplete","play_event","setState","PAUSED","PAUSE","BUFFERING","wait_event","CUED","isYoutube","initYoutubePlayer","cueVideoById","videoId","$watch","value","Player","events","onReady","onStateChange","onSourceChange","sources","newVal","oldVal","length","toString","$on"],"mappings":"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","file":"vg-youtube.js","sourcesContent":["(function(angular) {\n    'use strict';\n\n    var module = angular.module('rc-videogular.plugins.youtube', []);\n\n    module.run(['$rootScope', '$window', function($rootScope, $window) {\n\n        $rootScope.youtubeApiReady = false;\n\n        $window.onYouTubeIframeAPIReady = function() {\n\n            $rootScope.$apply(function() {\n\n                $rootScope.youtubeApiReady = true;\n            });\n        };\n\n        var tag = document.createElement('script');\n\n        tag.src = \"https://www.youtube.com/iframe_api\";\n\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    }]);\n\n    module.directive(\n        \"vgYoutube\", [\"$rootScope\", \"$window\", \"$timeout\", \"$interval\", \"VG_UTILS\", \"VG_STATES\", \"VG_VOLUME_KEY\",\n            function($rootScope, $window, $timeout, $interval, VG_UTILS, VG_STATES, VG_VOLUME_KEY) {\n                return {\n                    restrict: \"A\",\n                    require: \"^videogular\",\n                    link: function(scope, elem, attr, API) {\n                        var ytplayer, updateTimer, optionsArr, playerVars;\n\n                        var youtubeReg = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n                        optionsArr = attr.vgYoutube !== null ? attr.vgYoutube.split(\";\") : null;\n                        playerVars = {\n                            'controls': 0,\n                            'showinfo': 0,\n                            'rel': 0,\n                            'autoplay': 0, //Switch autoplay to 1 to autoplay videos\n                            'start': 0,\n                            'iv_load_policy': 1\n                        };\n\n                        if (optionsArr !== null) {\n                            optionsArr.forEach(function (item) {\n                                var keyValuePair = item.split(\"=\");\n                                if (playerVars.hasOwnProperty(keyValuePair[0])) {\n                                  playerVars[keyValuePair[0]] = keyValuePair[1] || 0;\n                                }\n                            });\n                        }\n\n                        function getYoutubeId(url) {\n                            return url.match(youtubeReg)[2];\n                        }\n\n                        function destroyYoutubePlayer() {\n                            ytplayer.destroy();\n                        }\n\n                        function updateTime() {\n                            API.onUpdateTime({\n                                target: API.mediaElement[0]\n                            });\n                        }\n\n                        function stopUpdateTimer() {\n                            if (updateTimer) {\n                                clearInterval(updateTimer);\n                            }\n                        }\n\n                        function startUpdateTimer(interval) {\n                            if (updateTimer) {\n                                stopUpdateTimer();\n                            }\n                            updateTimer = setInterval(updateTime, interval);\n                        }\n\n                        function onVideoReady() {\n                            //Define some property, method for player\n                            API.mediaElement[0].__defineGetter__(\"currentTime\", function () {\n                                return ytplayer.getCurrentTime();\n                            });\n                            API.mediaElement[0].__defineSetter__(\"currentTime\", function (seconds) {\n                                return ytplayer.seekTo(seconds, true);\n                            });\n                            API.mediaElement[0].__defineGetter__(\"duration\", function () {\n                                return ytplayer.getDuration();\n                            });\n                            API.mediaElement[0].__defineGetter__(\"paused\", function () {\n                                return ytplayer.getPlayerState() != YT.PlayerState.PLAYING;\n                            });\n                            API.mediaElement[0].__defineGetter__(\"videoWidth\", function () {\n                                return ytplayer.a.width;\n                            });\n                            API.mediaElement[0].__defineGetter__(\"videoHeight\", function () {\n                                return ytplayer.a.height;\n                            });\n                            API.mediaElement[0].__defineGetter__(\"volume\", function () {\n                                return ytplayer.getVolume() / 100.0;\n                            });\n                            API.mediaElement[0].__defineSetter__(\"volume\", function (volume) {\n                                return ytplayer.setVolume(volume * 100.0);\n                            });\n                            API.mediaElement[0].__defineGetter__(\"playbackRate\", function () {\n                                return ytplayer.getPlaybackRate();\n                            });\n                            API.mediaElement[0].__defineSetter__(\"playbackRate\", function (rate) {\n                                return ytplayer.setPlaybackRate(rate);\n                            });\n                            API.mediaElement[0].play = function () {\n                                ytplayer.playVideo();\n                            };\n                            API.mediaElement[0].pause = function () {\n                                ytplayer.pauseVideo();\n                            };\n                            updateTime(); // Initial time update\n                            angular.element(ytplayer.getIframe()).css({'width':'100%','height':'100%'});\n\n                            //Set media volume from localStorage if available\n                            if (VG_UTILS.supportsLocalStorage()) {\n                                //Default to 100% volume if local storage setting does not exist.\n                                API.setVolume(parseFloat($window.localStorage.getItem(VG_VOLUME_KEY) || '1'));\n                            }\n\n                            //Check state for auto play\n                            if (API.currentState !== VG_STATES.PLAY) {\n                                // Trigger canplay event\n                                var event = new CustomEvent(\"canplay\");\n                                API.mediaElement[0].dispatchEvent(event);\n\n                                //Play if autoplay true\n                                if (API.autoPlay === true) {\n                                    $timeout(function () {\n                                        API.play();\n                                    });\n                                }\n                            }\n                            else {\n                                ytplayer.playVideo();\n                            }\n                        }\n\n                        function onVideoStateChange(event) {\n                            var player = event.target;\n\n                            switch (event.data) {\n                                case YT.PlayerState.ENDED:\n                                    stopUpdateTimer();\n                                    API.onComplete();\n                                break;\n\n                                case YT.PlayerState.PLAYING:\n                                    // Trigger onStartPlaying event\n                                    var play_event = new CustomEvent(\"playing\");\n                                    API.mediaElement[0].dispatchEvent(play_event);\n                                    API.setState(VG_STATES.PLAY);\n                                    startUpdateTimer(600);\n                                break;\n\n                                case YT.PlayerState.PAUSED:\n                                    // NB Videogular calls pause() on the YouTube player to actually stop a video.\n                                    // Avoid jumping from the desired \"stop\" status to \"pause\" status:\n                                    if (API.currentState == VG_STATES.PLAY) {\n                                        API.setState(VG_STATES.PAUSE);\n                                    }\n                                    stopUpdateTimer();\n                                break;\n\n                                case YT.PlayerState.BUFFERING:\n                                    // Trigger onStartBuffering event\n                                    var wait_event = new CustomEvent(\"waiting\");\n                                    API.mediaElement[0].dispatchEvent(wait_event);\n                                break;\n\n                                case YT.PlayerState.CUED:\n                                    //No appropriate state\n                                break;\n                            }\n                        }\n\n                        function isYoutube(url) {\n                            if (url) {\n                                return url.match(youtubeReg);\n                            }\n                            return false;\n                        }\n\n                        function initYoutubePlayer(url) {\n                            if (ytplayer) {\n                                ytplayer.cueVideoById({\n                                    videoId: getYoutubeId(url)\n                                });\n                            } else {\n                                $rootScope.$watch('youtubeApiReady', function(value) {\n                                    if (value) {\n                                        ytplayer = new YT.Player(API.mediaElement[0], {\n                                            videoId: getYoutubeId(url),\n                                            playerVars: playerVars,\n                                            events: {\n                                                'onReady': onVideoReady,\n                                                'onStateChange': onVideoStateChange\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n\n                        function onSourceChange(url) {\n                            if (isYoutube(url)) {\n                                initYoutubePlayer(url);\n                            } else {\n                                if (ytplayer) {\n                                    destroyYoutubePlayer();\n                                }\n                            }\n                        }\n\n                        scope.$watch(\n                            function() {\n                                return API.sources;\n                            },\n                            function(newVal, oldVal) {\n                                if (newVal && newVal.length > 0 && newVal[0].src) {\n                                    onSourceChange(newVal[0].src.toString());\n                                }\n                                else {\n                                    onSourceChange(null);\n                                }\n                            }\n                        );\n                        scope.$on('$destroy', function() {\n                            stopUpdateTimer();\n                        });\n                    }\n                };\n            }\n        ]);\n})(angular);"],"sourceRoot":"scripts/"}